<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:aop="http://www.springframework.org/schema/aop" xmlns:p="http://www.springframework.org/schema/mvc"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans-4.0.xsd
        http://www.springframework.org/schema/context
        http://www.springframework.org/schema/context/spring-context-4.0.xsd
        http://www.springframework.org/schema/aop
        http://www.springframework.org/schema/aop/spring-aop-4.0.xsd
        http://www.springframework.org/schema/tx
        http://www.springframework.org/schema/tx/spring-tx-4.0.xsd http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc.xsd">

    <!-- Hibernate5 -->
    <!-- 加载资源文件  其中包含变量信息，必须在Spring配置文件的最前面加载，即第一个加载-->
    <!--<context:property-placeholder location="classpath:persistence-mysql.properties" />-->
    <context:property-placeholder location="classpath:*.properties" />
    <!--加载redis配置文件-->
    <!--<context:property-placeholder location="classpath:redis.properties" />-->
    <bean id="poolConfig" class="redis.clients.jedis.JedisPoolConfig">
        <property name="maxIdle" value="${redis.maxIdle}" />
        <!--<property name="maxTotal" value="${redis.maxActive}" />-->
        <property name="maxWaitMillis" value="${redis.maxWait}" />
        <property name="testOnBorrow" value="${redis.testOnBorrow}" />
    </bean>

    <bean id="connectionFactory" class="org.springframework.data.redis.connection.jedis.JedisConnectionFactory">
        <property name="hostName" value="${redis.host}"/>
        <property name="port" value="${redis.port}"/>
        <property name="poolConfig" ref="poolConfig"/>
        <property name="password" value="${redis.pass}"/>
    </bean>
    <bean id="redisTemplate" class="org.springframework.data.redis.core.StringRedisTemplate">
        <property name="connectionFactory"   ref="connectionFactory" />
    </bean>

    <bean id="sessionFactory"
          class="org.springframework.orm.hibernate5.LocalSessionFactoryBean">
        <property name="dataSource" ref="dataSource" />
        <property name="packagesToScan">
            <list>
                <!-- 可以加多个包 -->
                <value>com.tongji409.domain</value>
            </list>
        </property>

        <!--hibernate与实体类的映射文件-->
        <property name="mappingResources">
            <list>
                <value>HibernateEntitiesMapping/Task.hbm.xml</value>
                <value>HibernateEntitiesMapping/File.hbm.xml</value>
                <value>HibernateEntitiesMapping/Module.hbm.xml</value>
                <value>HibernateEntitiesMapping/LOCMetrics.hbm.xml</value>
                <value>HibernateEntitiesMapping/HalsteadMetrics.hbm.xml</value>
                <value>HibernateEntitiesMapping/McCabeMetrics.hbm.xml</value>
                <value>HibernateEntitiesMapping/StaticDefect.hbm.xml</value>
                <value>HibernateEntitiesMapping/User.hbm.xml</value>
            </list>
        </property>
        <property name="hibernateProperties">
            <props>
                <prop key="hibernate.hbm2ddl.auto">${hibernate.hbm2ddl.auto}</prop>
                <prop key="hibernate.dialect">${hibernate.dialect}</prop>
                <prop key="hibernate.show_sql">${hibernate.show_sql}</prop>
                <!--  <prop key="hibernate.current_session_context_class">thread</prop> -->
            </props>
        </property>
    </bean>

    <bean id="hibernateTemplate"
          class="org.springframework.orm.hibernate5.HibernateTemplate">
        <property name="sessionFactory">
            <ref bean="sessionFactory" />
        </property>
    </bean>


    <bean id="taskDao" class="com.tongji409.website.dao.impl.TaskDaoImpl">
        <property name="sessionFactory" ref="sessionFactory"/>
        <property name="hibernateTemplate" ref="hibernateTemplate" />
    </bean>

    <bean id="staticDefectDao" class="com.tongji409.website.dao.impl.StaticDefectDaoImpl">
        <property name="sessionFactory" ref="sessionFactory"/>
        <property name="hibernateTemplate" ref="hibernateTemplate" />
    </bean>

    <bean id="taskService" class="com.tongji409.website.service.TaskService" scope="prototype">
        <property name="taskDao" ref="taskDao"/>
        <property name="staticDefectDao" ref="staticDefectDao"/>
    </bean>

    <bean id="staticDefectService" class="com.tongji409.website.service.StaticDefectService" scope="prototype">
        <property name="staticDefectDao" ref="staticDefectDao"/>
    </bean>

    <bean id="userDao" class="com.tongji409.website.dao.impl.UserDaoImpl">
        <property name="sessionFactory" ref="sessionFactory"/>
        <property name="hibernateTemplate" ref="hibernateTemplate" />
    </bean>

    <bean id="userService" class="com.tongji409.website.service.UserService" scope="prototype">
        <property name="userDao" ref="userDao"/>
    </bean>

    <bean id="tokenManager" class="com.tongji409.util.token.manager.RedisTokenManager">
        <property name="redis" ref="redisTemplate"/>
    </bean>

    <!-- 数据库映射 -->
    <!--  class="org.apache.tomcat.dbcp.dbcp.BasicDataSource" -->
    <!--  class="org.springframework.jdbc.datasource.DriverManagerDataSource" -->
    <bean id="dataSource" class="org.springframework.jdbc.datasource.DriverManagerDataSource">
        <property name="driverClassName" value="${jdbc.driverClassName}" />
        <property name="url" value="${jdbc.url}" />
        <property name="username" value="${jdbc.user}" />
        <property name="password" value="${jdbc.pass}" />
    </bean>

    <!-- 配置Hibernate事务管理器 -->
    <bean id="transactionManager"
          class="org.springframework.orm.hibernate5.HibernateTransactionManager">
        <property name="sessionFactory" ref="sessionFactory" />
    </bean>

    <!--启动注解用注解来管理事务-->
    <tx:annotation-driven transaction-manager="transactionManager"/>

    <!-- 配置事务异常封装 -->
    <bean id="persistenceExceptionTranslationPostProcessor"
          class="org.springframework.dao.annotation.PersistenceExceptionTranslationPostProcessor" />

    <!--  声明式容器事务管理 ,transaction-manager指定事务管理器为transactionManager -->
    <tx:advice id="txAdvice" transaction-manager="transactionManager">
        <tx:attributes>
            <tx:method name="add*" propagation="REQUIRED" />
            <tx:method name="get*" propagation="REQUIRED" />
            <!--service层封装事务,每个方法都需要符合此处method的命名规则-->
            <tx:method name="start*" propagation="REQUIRED"/>
            <!--<tx:method name="start*" propagation="REQUIRED" read-only="false" rollback-for="java.lang.Exception" />-->
            <tx:method name="analyse*" propagation="REQUIRED"/>
            <tx:method name="*" read-only="true" />
        </tx:attributes>
    </tx:advice>

    <aop:config expose-proxy="true">
        <!-- 只对业务逻辑层实施事务 -->
        <aop:pointcut id="txPointcut" expression="execution(* com.tongji409.website.service..*.*(..))" />
        <!-- Advisor定义，切入点和通知分别为txPointcut、txAdvice -->
        <aop:advisor pointcut-ref="txPointcut" advice-ref="txAdvice"/>
    </aop:config>

</beans>